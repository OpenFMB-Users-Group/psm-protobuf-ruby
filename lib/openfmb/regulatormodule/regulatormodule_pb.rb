# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: regulatormodule/regulatormodule.proto

require 'google/protobuf'

require 'uml_pb'
require 'commonmodule/commonmodule_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("regulatormodule/regulatormodule.proto", :syntax => :proto3) do
    add_message "regulatormodule.DirectionalATCC" do
      optional :BndWid, :message, 1, "commonmodule.PhaseAPC"
      optional :CtlDlTmms, :message, 2, "commonmodule.PhaseISC"
      optional :LDCR, :message, 3, "commonmodule.PhaseAPC"
      optional :LDCX, :message, 4, "commonmodule.PhaseAPC"
      optional :VolSpt, :message, 5, "commonmodule.PhaseAPC"
      optional :voltageSetPointEnabled, :message, 6, "commonmodule.PhaseDPC"
    end
    add_message "regulatormodule.RegulatorControlATCC" do
      optional :logicalNodeForControl, :message, 1, "commonmodule.LogicalNodeForControl"
      optional :DirFwd, :message, 2, "regulatormodule.DirectionalATCC"
      optional :DirMode, :message, 3, "commonmodule.Optional_DirectionModeKind"
      optional :DirRev, :message, 4, "regulatormodule.DirectionalATCC"
      optional :DirThd, :message, 5, "commonmodule.PhaseAPC"
      optional :ParOp, :message, 6, "commonmodule.PhaseSPC"
      optional :rampRates, :message, 7, "commonmodule.RampRate"
      optional :state, :message, 8, "commonmodule.Optional_StateKind"
      optional :TapOpL, :message, 9, "commonmodule.PhaseSPC"
      optional :TapOpR, :message, 10, "commonmodule.PhaseSPC"
      optional :VolLmtHi, :message, 11, "commonmodule.PhaseAPC"
      optional :VolLmtLo, :message, 12, "commonmodule.PhaseAPC"
      optional :VolLmtMode, :message, 13, "commonmodule.Optional_VoltLimitModeKind"
    end
    add_message "regulatormodule.RegulatorPoint" do
      optional :control, :message, 1, "regulatormodule.RegulatorControlATCC"
      optional :startTime, :message, 8, "commonmodule.Timestamp"
    end
    add_message "regulatormodule.RegulatorCSG" do
      repeated :crvPts, :message, 1, "regulatormodule.RegulatorPoint"
    end
    add_message "regulatormodule.RegulatorControlScheduleFSCH" do
      optional :ValDCSG, :message, 1, "regulatormodule.RegulatorCSG"
    end
    add_message "regulatormodule.RegulatorControlFSCC" do
      optional :controlFSCC, :message, 1, "commonmodule.ControlFSCC"
      optional :regulatorControlScheduleFSCH, :message, 2, "regulatormodule.RegulatorControlScheduleFSCH"
    end
    add_message "regulatormodule.RegulatorControl" do
      optional :controlValue, :message, 1, "commonmodule.ControlValue"
      optional :check, :message, 2, "commonmodule.CheckConditions"
      optional :regulatorControlFSCC, :message, 3, "regulatormodule.RegulatorControlFSCC"
    end
    add_message "regulatormodule.RegulatorSystem" do
      optional :conductingEquipment, :message, 1, "commonmodule.ConductingEquipment"
    end
    add_message "regulatormodule.RegulatorControlProfile" do
      optional :controlMessageInfo, :message, 1, "commonmodule.ControlMessageInfo"
      optional :regulatorControl, :message, 2, "regulatormodule.RegulatorControl"
      optional :regulatorSystem, :message, 3, "regulatormodule.RegulatorSystem"
    end
    add_message "regulatormodule.RegulatorDiscreteControl" do
      optional :controlValue, :message, 1, "commonmodule.ControlValue"
      optional :check, :message, 2, "commonmodule.CheckConditions"
      optional :regulatorControlATCC, :message, 3, "regulatormodule.RegulatorControlATCC"
    end
    add_message "regulatormodule.RegulatorDiscreteControlProfile" do
      optional :controlMessageInfo, :message, 1, "commonmodule.ControlMessageInfo"
      optional :regulatorDiscreteControl, :message, 2, "regulatormodule.RegulatorDiscreteControl"
      optional :regulatorSystem, :message, 3, "regulatormodule.RegulatorSystem"
    end
    add_message "regulatormodule.RegulatorEventAndStatusATCC" do
      optional :BndCtr, :message, 1, "commonmodule.ASG"
      optional :BndWid, :message, 2, "commonmodule.ASG"
      optional :BndWidHi, :message, 3, "commonmodule.PhaseSPS"
      optional :BndWidLo, :message, 4, "commonmodule.PhaseSPS"
      optional :DirCtlRev, :message, 5, "commonmodule.PhaseSPS"
      optional :DirIndt, :message, 6, "commonmodule.PhaseSPS"
      optional :DirRev, :message, 7, "commonmodule.PhaseSPS"
      optional :LDCR, :message, 8, "commonmodule.ASG"
      optional :LDCX, :message, 9, "commonmodule.ASG"
      optional :ParOp, :message, 10, "commonmodule.StatusSPS"
      optional :rampRates, :message, 11, "commonmodule.RampRate"
      optional :state, :message, 12, "commonmodule.Optional_StateKind"
      optional :StDlTmms, :message, 13, "commonmodule.StatusINC"
      optional :TapOpErr, :message, 14, "commonmodule.StatusSPS"
      optional :TapPos, :message, 15, "commonmodule.PhaseINS"
      optional :VolLmtHi, :message, 16, "commonmodule.PhaseSPS"
      optional :VolLmtLo, :message, 17, "commonmodule.PhaseSPS"
      optional :VolSpt, :message, 18, "commonmodule.PhaseAPC"
      optional :voltageSetPointEnabled, :message, 19, "commonmodule.StatusSPS"
    end
    add_message "regulatormodule.RegulatorEventAndStatusANCR" do
      optional :logicalNodeForEventAndStatus, :message, 1, "commonmodule.LogicalNodeForEventAndStatus"
      optional :DynamicTest, :message, 2, "commonmodule.ENS_DynamicTestKind"
      optional :PointStatus, :message, 3, "regulatormodule.RegulatorEventAndStatusATCC"
    end
    add_message "regulatormodule.RegulatorEvent" do
      optional :eventValue, :message, 1, "commonmodule.EventValue"
      optional :regulatorEventAndStatusANCR, :message, 2, "regulatormodule.RegulatorEventAndStatusANCR"
    end
    add_message "regulatormodule.RegulatorEventProfile" do
      optional :eventMessageInfo, :message, 1, "commonmodule.EventMessageInfo"
      optional :regulatorEvent, :message, 2, "regulatormodule.RegulatorEvent"
      optional :regulatorSystem, :message, 3, "regulatormodule.RegulatorSystem"
    end
    add_message "regulatormodule.RegulatorReading" do
      optional :conductingEquipmentTerminalReading, :message, 1, "commonmodule.ConductingEquipmentTerminalReading"
      optional :phaseMMTN, :message, 2, "commonmodule.PhaseMMTN"
      optional :readingMMTR, :message, 3, "commonmodule.ReadingMMTR"
      optional :readingMMXU, :message, 4, "commonmodule.ReadingMMXU"
      optional :secondaryReadingMMXU, :message, 5, "commonmodule.ReadingMMXU"
    end
    add_message "regulatormodule.RegulatorReadingProfile" do
      optional :readingMessageInfo, :message, 1, "commonmodule.ReadingMessageInfo"
      repeated :regulatorReading, :message, 2, "regulatormodule.RegulatorReading"
      optional :regulatorSystem, :message, 3, "regulatormodule.RegulatorSystem"
    end
    add_message "regulatormodule.RegulatorStatus" do
      optional :statusValue, :message, 1, "commonmodule.StatusValue"
      optional :regulatorEventAndStatusANCR, :message, 2, "regulatormodule.RegulatorEventAndStatusANCR"
    end
    add_message "regulatormodule.RegulatorStatusProfile" do
      optional :statusMessageInfo, :message, 1, "commonmodule.StatusMessageInfo"
      optional :regulatorStatus, :message, 2, "regulatormodule.RegulatorStatus"
      optional :regulatorSystem, :message, 3, "regulatormodule.RegulatorSystem"
    end
  end
end

module Regulatormodule
  DirectionalATCC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.DirectionalATCC").msgclass
  RegulatorControlATCC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorControlATCC").msgclass
  RegulatorPoint = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorPoint").msgclass
  RegulatorCSG = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorCSG").msgclass
  RegulatorControlScheduleFSCH = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorControlScheduleFSCH").msgclass
  RegulatorControlFSCC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorControlFSCC").msgclass
  RegulatorControl = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorControl").msgclass
  RegulatorSystem = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorSystem").msgclass
  RegulatorControlProfile = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorControlProfile").msgclass
  RegulatorDiscreteControl = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorDiscreteControl").msgclass
  RegulatorDiscreteControlProfile = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorDiscreteControlProfile").msgclass
  RegulatorEventAndStatusATCC = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorEventAndStatusATCC").msgclass
  RegulatorEventAndStatusANCR = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorEventAndStatusANCR").msgclass
  RegulatorEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorEvent").msgclass
  RegulatorEventProfile = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorEventProfile").msgclass
  RegulatorReading = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorReading").msgclass
  RegulatorReadingProfile = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorReadingProfile").msgclass
  RegulatorStatus = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorStatus").msgclass
  RegulatorStatusProfile = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("regulatormodule.RegulatorStatusProfile").msgclass
end
